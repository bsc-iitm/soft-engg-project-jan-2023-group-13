openapi: 3.0.0
info:
  title: Smart Support (SE Project)
  version: 1.0.0
  description: API for Smart Support App
servers:
  - url: http://127.0.0.1:5000
security:
  - Bearer: ["Authentication-Token: {token}"]    
tags:
  - name: User
    description: All user endpoints 
  - name: Ticket
    description: All ticket endpoints
  - name: Comment
    description: All comment endpoints  

paths:  
  /users:
    get:
      summary: Get all users
      tags: 
        - User
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      summary: Create a new user
      tags: 
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request
  /users/{user_id}:
    parameters:
      - in: path
        name: user_id
        required: true
        schema:
          type: integer
          format: int64
        description: User ID
    get:
      summary: Get a user by ID
      tags: 
        - User
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
    put:
      summary: Update a user by ID
      tags: 
        - User
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
            format: int64
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request
        "404":
          description: User not found
    delete:
      summary: Delete a user by ID
      tags: 
        - User
      responses:
        "204":
          description: No content
        "404":
          description: User not found

  /tickets:
    get:
      summary: Get all tickets
      tags: 
        - Ticket
      responses:
        200:
          description: Return a list of all tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'

    post:
      summary: Create a new ticket
      tags: 
        - Ticket
      requestBody:
        description: Ticket object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        201:
          description: Return the newly created ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'

  /tickets/{id}:
    get:
      summary: Get a ticket by ID
      tags: 
        - Ticket
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the ticket to get
      responses:
        200:
          description: Return the ticket with the specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        404:
          description: Ticket not found

    put:
      summary: Update a ticket by ID
      tags: 
        - Ticket
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the ticket to update
      requestBody:
        description: Ticket object to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        200:
          description: Return the updated ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        404:
          description: Ticket not found

    delete:
      summary: Delete a ticket by ID
      tags: 
        - Ticket
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the ticket to delete
      responses:
        204:
          description: Ticket deleted
        404:
          description: Ticket not found

  /comments:
    get:
      summary: Get all comments
      tags: 
        - Comment
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      summary: Create a new comment
      tags: 
        - Comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreateRequest'
      responses:
        201:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          description: Invalid request body
  /comments/{comment_id}:
    get:
      summary: Get a comment by ID
      tags: 
        - Comment
      parameters:
        - name: comment_id
          in: path
          required: true
          description: ID of the comment to retrieve
          schema:
            type: integer
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: Comment not found
    put:
      summary: Update a comment by ID
      tags: 
        - Comment
      parameters:
        - name: comment_id
          in: path
          required: true
          description: ID of the comment to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentUpdateRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          description: Invalid request body
        404:
          description: Comment not found
    delete:
      summary: Delete a comment by ID
      tags: 
        - Comment
      parameters:
        - name: comment_id
          in: path
          required: true
          description: ID of the comment to delete
          schema:
            type: integer
      responses:
        204:
          description: Successful response
        404:
          description: Comment not found

components:
  schemas:
    Ticket:
      type: object
      properties:
        ticket_id:
          type: integer
          format: int64
          description: The unique identifier for the ticket
        student_id:
          type: integer
          format: int64
          description: The unique identifier for the student who created the ticket
        title:
          type: string
          description: The title of the ticket
        body:
          type: string
          description: The body of the ticket
        status:
          type: string
          description: The status of the ticket
        created_at:
          type: string
          format: date-time
          description: The date and time the ticket was created
        updated_at:
          type: string
          format: date-time
          description: The date and time the ticket was last updated
      example:
        ticket_id: 1
        student_id: 2
        title: "Need help with Python"
        body: "I'm having trouble understanding Python classes. Can someone help me?"
        status: "Open"
        created_at: "2022-03-10T18:42:31Z"
        updated_at: "2022-03-10T18:42:31Z"
    User:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        fs_uniquifier:
          type: string
      required:
        - User_id
        - Username
        - email
        - first_name
        - fs_uniquifier
      example:
        user_id: 1
        username: jdoe
        email: jdoe@example.com
        first_name: John
        last_name: Doe
        fs_uniquifier: 12345
    UserCreateRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        fs_uniquifier:
          type: string
      required:
        - Username
        - password
        - email
        - first_name
        - fs_uniquifier
      example:
        username: jdoe
        password: pass123
        email: jdoe@example.com
        first_name: John
        last_name: Doe
        fs_uniquifier: 12345
    UserUpdateRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        password:
          type: string
          minLength: 6
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
        first_name:
          type: string
          maxLength: 255
        last_name:
          type: string
          maxLength: 255
        tags:
          type: array
          items:
            type: integer
        roles:
          type: array
          items:
            type: integer
      # required: []
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        user_id:
          type: integer
          format: int64
        ticket_id:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - text
        - user_id
        - ticket_id
        - created_at
        - updated_at
    CommentCreateRequest:
      type: object
      properties:
        user_id:
          type: integer
          description: The ID of the user creating the comment.
          example: 123
        ticket_id:
          type: integer
          description: The ID of the ticket that the comment is being added to.
          example: 456
        content:
          type: string
          description: The content of the comment.
          example: "This is a comment on the ticket."
      required:
        - user_id
        - ticket_id
        - content
    CommentUpdateRequest:
      type: object
      properties:
        body:
          type: string
          description: The updated comment text.
          example: This is an updated comment.
      required:
        - body    